All the lessons we will pick up about HTML, CSS and JavaScript will be placed
in this file

......

LESSON 3

What is HTML?
HTML is a language used to describe the structure of a webpage. It is used 
tell the browser how to arrange the contents of a web page.

Pages are made up of elements. HTML is used to describe what elements a page
contains and how to arrange those elements. Elements of a web page
- title, paragraph, header, list, table...

HTML also describes formats - 


HTML does not describe how elements are formatted or how they appear on the page

A Web browser is also an HTML formatter...it parses HTML document and formats
them on the screen...Browser maps from html element to styles on screen

tags indicate different parts of a web page and have different effects on the browser - i.e. a browser reacts differently to different tags.

An HTML doc has two parts - the text, the tags

Attribute are used to describe additional information about a tag
Attributes are used to modify elements
The ID attribute is used to uniquely identify an element within a page
Identifiers are used with JS and CSS
The class attribute is used to identify a particular group of elements

CSS is used to control the look and feel of a web doc...CSS can be used to tell
the browser to render an element differently from how it normally would

Styles can be placed in sheets and web pages can link to those sheets.
Styles can be applied site-wide, page-wide, class wide or even to a specific element. Style sheets are page wide, the style attribute is used to apply
style to a specific element

Rules can be applied to individual elements, to groups of elements


...........


LESSON 4

The three tags: HtML, head and body.
HTML - container for all tags in a page. indicates that text is in HTML format
head - container for information about the page, not information displayed. ie. what is title of the page?
body - contains page content including text, pictures, links etc.

Here we are learning to communicate in a language that can be understood by browser. We tell the browser what to display.
the title tag is used to tell the browser what to put on the title bar
while on the issue of titles, sections of a page can be given titles. The heading tag is used to entitle page sections.
there are 6 heading levels


LESSON 5

Ordered lists
Unordered lists
Definition lists

LESSON 6

Again, here we're just learning to communicate with the browser.
A link tells the browser to jump, go to a specific location. That location can be withi the same page as the 'link' or it can
be some other page on the web.
A link has an anchor, the anchor is the clickable link.
href is a hypertext reference and is an attribute of the anchor tab
A link is a pointer. It points to some location in web space. The href attribute is used to show where the link pointer points to.
The link tag like all tags is a container. All the text/image contained within a link tag will be clickable. Placing text inside a 
link tag is a way of telling the browser to highlight the text and jump to the location the link points to when clicked.
A link is created from one location to another.
Locations in computer space are identified by url. A file name serves as a url, the last part of the url at least.

The href tells the browser where in computer space to find the location being linked to. When only the filename is specified, browser
looks in the same file as the current file. This is true even when a link is made to a page that sits on a different computer. When only filename is specified, browser looks in the same directory as the file containing the link.

When directing the web browser, we can provide it a relative path name or an absolute one. The relative path name, as the name implies, says relative to this file, this is where to find the location being linked to.

When you see a /, replace it with "." and think in terms of objects.

files/file.html - files.file : Files is the array and file is the element of the array. The element belongs to the array. Here we are
saying go to the files directory and find the file object within this directory. The files directory is in the same directory as the current file.

files/morefiles/file.html: files.morefiles.file
The file being linked to "file.html" is in the morefiles array. The morefiles array itself is an element of the files array. The array files is in the same directory as the file that contains the link.
../file.html
The file being linked to belongs to a directory that is one level above the current directory. The directory one level above the current directory an element of an array. That directory is in the same directory as the file containing the link.
../../files/file.html
file element belongs to the files array

Abslute path: here we're directing the browser from the top of the file system.
Absolute path names begin with a /
ie. when browser sees a / it knows you are using absolute pathname system to direct it.
/home/katlego/file.html
Remember we are always looking for an object not a directory.
Here we are saying that the object file.html is located in the katlego directory of the home.
home.katlego.file.html: The object bein linked to belongs to the katlego array. The katlego array itself is an element of the home array
An array is a container.

The root directory is /. home is not the only element of the root directory, there are many others.
the home directory is home/katlego not just home. katlego is the only element of the home array.

relative vs absolute
You want to avoid breaking links when files are being moved around.
If objects being linked are in the same array a relative system will do. When the array is moved, links won't break
If object being linked are not in the same array, an absolute system will do. When the array is moved, link still not broken.

objects on the same local disc can be linked
An object on a local disc to be linked to another that is on foreign disk.
The internet is an interconnection of computers. Each computer can be viewed as an element in web space. Each computer contains files on
its local disk.
To link to an element on a foreign computer, the pathname on the hypertext link is replaced by a url.
Not foreign but remote.

Up to this points objects have been referring to web pages that have an html extension. ie. html files
Each page has a url. A page's url is found in the address box of the browser. 

Up to this point we've treated the object we are linking to as a page. We can treat the page as an array containing several locations
within its core. This means that we can link to specific locations within a page, not just the page in general.

The way to do this is to place that location under a tag and assign an ID to that tag. No two tags in the same page can have the same
ID. 
Since the html file plays the role of the array and the ID'd tag plays the role of the contained object, the # replaces the /
file.html#idname replace # with . and think in terms of objects. The object being linked to idname, belongs to array file.
Elements in the same page can also be linked using the ID attribute
<a href = "#idname">clickable link</a> - this is the same idea as the relative pathname.

url consists of protocol, host, directory/path
it can also contain port, query and...

Anchor tag and hypertext reference being linked to
A relative pathname defines the location of the file/object being linked to relative to the file containing the link. Here we are saying
to find the file, search starting at the directory containing the file and follow the link.
An absolute pathname - starting with / - searches relative to the root directory
An anchor is a specific location/tag - list item, paragraph, heading... -  marked with the ID attribute. The anchor is used to define
a specific location within a page that can be linked to.
http, ftp points to a file on an ftp server, a file url points to a file contained on a local disk and mailto urls are used to send email


A browser is a on object. The browser object is commanded using the HTML tags.
The browser object has a pointer. The browser can be commanded to make its pointer point to a specific location. 
When the browser is made to point at that location, it parses and renders contents it finds at the location.
The browser object receives commands and communicates with the server and fulfil those commands.
The url contains all the information the browser needs to do its job.
This is a typical client-server application. The user uses the client to make commands of the server. The user commands the server via the browser.
The server does the real job.

............................

LESSON 7

Here I'm showing you what the browser can be commanded to do.

....................


LESSON 8

A tag has a style attribute
The style attribute is the least efficient means of applying style to a page.

This is a bit confusing but, in addition to the style attribute of tags, we also have the style HTML tag that is used to apply rules
to specific elements of a page. Inside the style tag, rules are written
<style>
selector{"property: value","property: value"}
</style>
Here we are saying to the browser whenever you see a selector in this page, affect its appearance/style as the rules dictate.
The style attribute is placed inside the head of a document. When done in this way the rules are page-wide ie. apply to all elements 
of a page.
An alternative is to create a style sheet and link to it from any page using the link tag. The link tag's href attribute is used
to tell the browser where to fetch the sheet being linked to. The type attribute specifies MIME info...
medium can be print, screen. You can specify different styles for different media outlets.
Stylesheets can be given titles. The rel attribute of the link tag is used to specify the title of the sheet being linked to
You can specify many sheets for your page but the one with title matching rel will be the preferred on.
Now JavaScript can be used to select between different sheets.

One page can link to different sheets and all rules will be applied

Look, each tag is like a class. Everytime the browser sees a tag, it creates an instance/object of the tag class.
Styles can be applied to more than one selector at a time
h,p,li {pro;val}
the "," is like an and. here we are saying this rule applies to h and p and li. When you see comma, think and.
In HTML it's possible to nest element ie. place one element inside another.
An element nested belongs to another one. Rules can be specified for nested elements by specifying the nesting element and the nested element.

h li{pro;val}
Here we are saying. the rule applies to li in h
Space means in but is read backwards. rule applies to all instances of li in h. When you see space think "in" and read it backwards.
cite {pro;val} - all instances of cite
p cite{pro;value} - all instances of cite in paragraph
li cite{pro;value} - all instances of ite in list.

more specific rules override more general rules. This means that rules for nested elements wil override more general ones.

We can create our own classification for use with css.
HTML tags all have class and id attributes. The id is like assigning a variable name to a tag and the class attribute is like assigning
a type to a tag. Think of the id as the name and the class as the surname. The name is unique to the individual but the surname is
shared by the group.
class          id
type           variable
surname        name
group          individual

.className{pro;val}
The dot says to browser we are referring to a class
div.important{pro;val}
p.important{pro;val}
Here we are being more specific to the browser. We are saying div.important = div of the important class
p.important = p of the important group

# -> id
. -> class

h1, #headline, .heading, div.important {pro;value}
h1 -> element
, -> and
# -> id
. -> class
div.important -> div in the important group

ul li.important{pro,value;}
" " in
li.imporant -> li in the important group
rule applies to list item belonging to the important class and nested within an unordered list.

a new class can be created by combining simpler classes.
.yellow{}
.blue{}
.yellow.blue{}
<class "blue yellow">
For rule to be applied, element must be present in both.

Cascading - styles cascade from parent to child

The body is the main parent.
The div is the next parent
The ps are the next set of parents
the spans are the children of the p

The main idea is that links have a state; a link can be active, visited, hover...
: -> link is some state

BOX MODEL
Margin
Border
Padding
Content

Each element has a box around it. The box around an element has a border, a margin and some padding.
The attributes of an element's box are its content, padding, border and margin.
Each attribute in turn has attributes. Attributes of a box's border are its width,colour, style
The border property is used to set the values of multiple attributes.
Each border has sides; left, right, top and bottom Each side's attributes can be set independently.

There is some white space surrounding a box's border. Padding is the whitespace inside the border and margin is the whitespace
outside the border.

Each element has a box. The box has a border. The border has a padding and some margin as well. The padding is the space inside the border
and the margin is the space outside the border. When there's no padding, the content will be right up againt the border and when there's no margin the outside elements will be jammed against the border.

the display property is used to set how the content is display - inline or block.

p span.important{pro;val}
this is an element span of class important nested within a paragraph element.

The size of the box set using the width and height properties of the style

//.......
A web page document has elements. These include headings, titles, paragraphs, lists, images, links etc
These are called HTML element. CSS treats HTML  elements as objects. Like all objects, these elements have
attributes. Some of the attributes of HTML elements are its border, its background, padding and margin. Each
of these attributes are also objects that have their own attributes. A background, has an image, a position...

Lesson 3 introduced the basic elements - html, head, title, body. It then showed you how to apply styles
to basic elements.	

Lesson 4 discussed the basic elements indlucing p,h1-6

Lesson 5 discussed how to organize information using lists
A list is just another element. CSS can also be applied to a list element. Style to a list element refers to type. 
for ordered - number,roman... for unordered - circle,disc or even image
The list-style-type   property is used control this feature of lists.
There's also list-style-position property controls the position of the list relative to the text

In Lesson 6 we disussed links

In Lesson 7 we looked at how to format text using css

Lesson 8 discussed how to use images on a web page

4: Basic elements
5: Lists
6: Links
7: CSS
8: Images


Here we treat HTML elements as objects. When the browser sees a tag, it instantitates an object of that class
All of these objects have attributes.
CSS is mainly used to provide values for these attributes.
HTML has basic elements: html,head, title, body, paragraph, list, link etc.
Text and images can be placed inside elements.
These elements can also be seen as containers. They can contain text or images.
All of these elements have certain attributes.

Each element a box. Each element's box has content, border, padding and margin. The content is what the container contains, it's the actual text or image placed inside the container. The rest of the attributes are set using style sheets.

So we have HTML elements. Elements contain text or images. Each element has a box that in turn has content, border, padding and margin.
Each element also has a background.
Thus there's an element. That element has a box. The box has a content, a border and background. These elements of a box are also treated as objects with personal attributes. A border has padding and margin. A background has a colour, an image etc.

Each element can be assigned a variable name and type that it belongs to. The class and id global attributes are used to assign a group
and a name to an element.

Once we can identify elements, either by name or by group, we can assign rules to their behaviour and appearance.
CSS allows us to say for element x do {y;z}
It's also possible to nest one element within another. 


This is the big picture view.
HTML is the root element, all other elements are contained within the HTML element.
All the actual contents of the document are placed within the body element.

Each HTML document has dimensions. The HTML itself can be understood to have a box around it.
The document will have a certain width and a certain height. 
The document itself can be viewed as a table containing a certain number of rows and columns. 
Pixel is a useful unit of measure.

Elements are displayed on the document. An element occupies a region of the document.

Unless told otherwise, the browser places elements as they appear one after the other

This is why I say the HTML itself has a box. It becomes the containing element for the body element.
The body's border is contained within the html element.

A website is a set of linked HTML documents.

When the browser instantiates an object on an HTML page, it assigns to it a row
A row can only accomodate a certain number of characters, so when it fills up the next row is made available.
The next object created starts at the following row.

Placing elements in series is just one way of organizing them. Elements can also be placed nested.

The html document is like a table. Each address on the table is identified by its row and column.
The main idea is that elements are placed at addresses on the table.

In so saying, an element occupies an address.

An element is placed at an address.

An anchor can be placed at any address occupied by an element.

When an anchor is placed at an address, that address becomes a clickable link.

Remember elements are actually abstract objects that do not appear on the page. Only the text/image they contain
appears on the page. The element is just a container for actual text/image.

No, no. Here we are looking for the address of where the anchor is placed. That 

When we place an anchor on a page, we specify where the anchor links to and what the clickable item on the page is.

Remember the anchor acts on the cliking side.

We can link to another page or a specific address on another page. To link to a specific address on a page, we have to assign
a name to the element that occupies the address we want to link to.

The degree of specificity varies.

HTML is the root, and then from the root we can go to other places within the HTML
Services.html#name
A link allows the document viewer to jump to a different location.

A set of linked documents. Links exist between documents.

The anchor tag has a pointer that points to a specific location.

An image is placed within an image tag.
An image itself is a file.
It has a width and a height.
To place an image on a web document we have to wrap it around an image tag.
The image tag also has an image pointer that points to a image file.

Okay, let's take it a notch higher. The HTML document is stored somewhere on the computer

The computer itself has the root directory.
Files are placed inside directories.

There's the root directory
There's the home directory. Within this directory you'll find other directories such as Downloads, Desktop etc.
Within the Downloads directory you'll find other directories and files.
The browser has to be told where on the computer to find the file.
The address of a file is specified using either an absolute address or a relative one.

The browser itself has a pointer - the url. 
google-chrome ~/HTML/file.html
I'm using the chrome browser. Here chrome's pointer is pointing at file within the HTML directory.
The browser's pointer is pointing at this location, this is where it is.
Even when the browser points at the file.html it points at a specific location within the file.html - start location.

Address boils down to row and column, if none is specific 0,0 will be pointed to.

Files are organized in a structure - a hierachy.

The browser has an image tag. This too is an element. The image tag has a pointer - src. 
The broswer will display an image located where its image pointer is pointing to.
The image to be displayed is placed somewhere on the computer. 


floating means you place it against the edge of its containing container.
It also means that you keep the box as small as possible, big enough to fit text.

So float right means place it against the right edge of its parent container and make its box as small as possible

You see, by floating left you make line it up against the edge and make it as small as possible. This leaves room for other elements
to occupy the same row as the floated element. Without floating, the element takes up the entire row, with floating it's only as wide
as it needs to be.

All elements have to be floated independently. If the second element is not floated, it will fill up the entire row and make a mess.
That's what floating means.
Images can be floated.


<a href="nothing"><img src="automation.jpeg" ismap></a>
show coordinates when move hovers over image

This idea is extendable.

An image is like text, it's content. HTML has the img tag. The img tag represents the image element.
The img tag has a pointer - src. The browser displays an image located where the image pointer points.
Each file on the system has a url - this is its unique address.
When an image object is created, its pointer points to an image on the disk.

img is an inline image, it's inline with text.
The image element like any other is an object that has some attributes.

vertical-align allows us to set how an image is aligned with the text it's inline with.

...............


A table is an element. It's attribute include a caption, a heading, a cell and some data. 

..............


The computer is the most seminal discovery of the 21st Century. Ability to manipulate the computer and make it do what I want it to do
will surely put me at an advantage in future. The end goal of these exercises is to become proficient and coding, scripting and creating my own applications. Not only do I believe this will pay dividens later, I'm in the process of setting up a secondary income stream.
My goal is to get a gig as a software developer.

Remember, padding and margin control the space in and around the border. If you want the content to hug the border, use 0 padding, if you
want surrounding element to hug the border use 0 margin.
CSS's Position property affects the location of the element on the page. In the normal flow, an element will be placed at a certain location. The element can be moved from its location using the top and left properties of CSS once you've set a relative positioning scheme. Negative top pixel value moves element up from normal position and positive moves it down.

An element is placed inside a containing block. That containing block becomes the ancestor of the element. The ancestor of the paragraph
element is the body block..

An elements are positioned relative to its ancestor.

The idea is that content - whether image or text, list or table, can be placed inside an HTML and positioned using CSS.

The inner span's immediate ancestor is the outer span, so its positioned is referenced to the outer span.
The outer span's immediate ancestor is the paragraph

The background-color property is also very powerful.
An element without a defined background color is transparent. This means that elements beneath it will be visible. Once a background colour is added to an element, it covers whatever lies beneath.
No background means transparent.
 
That's it with relative position scheme, now let's check out absolute.

Here's a simple exercise, create an AccSight calender.

Annotating means labelling a specific section of an image for example. We can place a block around an item on the image and add a 
note to that part. Nesting is used to achieve this.

#picture:hover #note1 -> note1 is nested within picture. Picture:hover is an alias for a picture that has a mouse over it.

note1 is a div. 
#picture #note1{display: none;}
#picture:hover #note1{display: block}
Here the note1 div only appears when a mouse hovers over div.

We can also place images in a set and scroll through them.

I really want you to do this calender exercise. In your mind you should see HTML elements and how they relate to what you want to do.


p span.important -> a span element of class important nested within a paragraph. span is desce

p > span.important -> a span element of class important that is a child of a paragraph element

the key word is direct. A child is a direct descendant of a parent but not all descendants are children, they may be
children's chidren.

b a  : a is just a descedant of b, not necessarily a child. Larger pool.
b > a: a is a direct descedant of b. It's a child. Smaller pool

what is a child and how does this relate to nesting. If a span is nested within a paragraph, does that make it a child?

When you start nesting there comes a need to identify items by levels.

Style must only be applicable to top level items

ul.topLevel > li

Next sibling selector

h1 + p: First paragraph that follows h1 and has same parent as p
h1 ~ p: paragraph that has same parent as h1 and not just the first.

#navBar: element with id = navBar
#navBar ul: list nested within navBar, all lists
#navBar ul > li: list item that is a child of a list nested within elmnt known as navBar
#navBar ul > a: link that is a child of a list within navBar
#navBar ul ul: list nested within a list that is itself nested within navBar
#navBar ul ul li: list item that nested within a list that's within a list that's within navBar
#navBar ul ul li > a: link that's a child of a list item nested within a list that's within a list that's within navBar
#navBar li:hover > a: link that's a child of a hovering list item nested within navBar
#navBar li:hover > ul: list that's a child of a hovering list item nested within navBar***

***so, you want to display the entire list when a mouse hovers over a list item
The computer will do what you tell it to.

..................................................


A form is an HTML element. It has an action and a method. Action is the script that gets loaded when the form is submitted.
A form can contain other elements.

A form allows information to be collected from the user.

Programs are stored at urls. Those programs get invoked, loaded when a form is submitted.

A form is submitted with some data. That data is labelled using the name attribute of the input tag.
The program processes the data and creates a response.

A form packages a set of controls. Each control accepts an input from a user.
A user can provide many different kinds of inputs. Input can be text, password or even submit. A submit input appears as a button
that can be pressed. A text input and password input appear as blocks that can be filled with text.

So we take scripts and store them at urls.

The form's data can be sent to any url, including a 


...................

In time I'm in the second month of a 6month programming bootcamp. Within this six months, I wil accomplish...
A website for my company
A quoting and accounting web-based application for my company.
An access control application that uses ZKTeco hardware to manage access.
In the process of building these systems, I will learn HTML, CSS, Java, PHP and MySQL.

These are my widly ambitous goals for 2022. To reach these goals sacrifices will have to be made. I will have to retreat from social
interactions for a while. I will have to dedicate 8-12 daily towards reaching these goals.

I don't know where my frame of mind will be at the end of it all. I cannot use my current fear-riddled frame of mind to decide what
I'll do after these goals have been reached. I will decide when the time comes. Given that I put in enough work, consistently so, I will
be in a better position in September. For now I will have to play it cool and lay back behind the scenes.


.......


The browser itself is not a passive element in this scenario. The browser
can do a lot of things. You just have to tell it what to do.

The browser can process and validate data input

The browser carries a lot of intelligence. Invoking some of this intelligence
will save you a lot of coding effort later on. Many of the things you would ordinarily do in code, the browser can be commanded to do for you.
You need to know what the browser can do and what can be done to make it do that thing. THe browser is very powerful. If explored fully, coding effort
can be reduced significantly.

The input types are like the primitives for the browser. The browser can only
parse a finite list of types - primitives - text,url,password....
given the type the browser can be convinced to validate inputs.\


calm down, calm dizzy. Don't blow things outta propotion.

The browser is an existing program. It exists, instead of writing your own programs, you can learn how to command the browser and make it do the things that you want to do. This is what thinking is about. Instead of creating
something new, learn how to command something that already exists.

The browser is a very clever program. Learning to command the browser you can
inherit some of its cleverness and use it in your own system.

You see, you can use Java to create a web browser. you'll just be mapping
tags to underlying functions.

The main idea behind all of this is to use the browser to communicate with the
user. Communication means passing information.

Using the various form controls the user can...

Submit one line or multi-line texts
Select one item in a list of multiple items
Select multiple items in a list of items
Click a button to submit form data.

All of these are merely different ways of receiving informtation from the user.


Look man, the skill you are scavanging for is incredibly difficult to attain. The amount of time required to attain
the skill is immense. 

But the skill will trully set you apart. The title Electrical
Engineer is much too broad. After graduation I had to sit down and narrow my interests. I had to decide what interests me the most.

You can write applications that run on the browser. That is an incredibly useful skill to attain. T

You must use fieldset and legend to group the various fields that collect data. You'll have the customer details
field set, the product details field set. You'll also have the quotation field set.
