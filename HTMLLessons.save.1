All the lessons we will pick up about HTML, CSS and JavaScript will be placed
in this file

......

LESSON 3

What is HTML?
HTML is a language used to describe the structure of a webpage. It is used 
tell the browser how to arrange the contents of a web page.

Pages are made up of elements. HTML is used to describe what elements a page
contains and how to arrange those elements. Elements of a web page
- title, paragraph, header, list, table...

HTML also describes formats - 


HTML does not describe how elements are formatted or how they appear on the page

A Web browser is also an HTML formatter...it parses HTML document and formats
them on the screen...Browser maps from html element to styles on screen

tags indicate different parts of a web page and have different effects on the browser - i.e. a browser reacts differently to different tags.

An HTML doc has two parts - the text, the tags

Attribute are used to describe additional information about a tag
Attributes are used to modify elements
The ID attribute is used to uniquely identify an element within a page
Identifiers are used with JS and CSS
The class attribute is used to identify a particular group of elements

CSS is used to control the look and feel of a web doc...CSS can be used to tell
the browser to render an element differently from how it normally would

Styles can be placed in sheets and web pages can link to those sheets.
Styles can be applied site-wide, page-wide, class wide or even to a specific element. Style sheets are page wide, the style attribute is used to apply
style to a specific element

Rules can be applied to individual elements, to groups of elements


...........


LESSON 4

The three tags: HtML, head and body.
HTML - container for all tags in a page. indicates that text is in HTML format
head - container for information about the page, not information displayed. ie. what is title of the page?
body - contains page content including text, pictures, links etc.

Here we are learning to communicate in a language that can be understood by browser. We tell the browser what to display.
the title tag is used to tell the browser what to put on the title bar
while on the issue of titles, sections of a page can be given titles. The heading tag is used to entitle page sections.
there are 6 heading levels


LESSON 5

Ordered lists
Unordered lists
Definition lists

LESSON 6

Again, here we're just learning to communicate with the browser.
A link tells the browser to jump, go to a specific location. That location can be withi the same page as the 'link' or it can
be some other page on the web.
A link has an anchor, the anchor is the clickable link.
href is a hypertext reference and is an attribute of the anchor tab
A link is a pointer. It points to some location in web space. The href attribute is used to show where the link pointer points to.
The link tag like all tags is a container. All the text/image contained within a link tag will be clickable. Placing text inside a 
link tag is a way of telling the browser to highlight the text and jump to the location the link points to when clicked.
A link is created from one location to another.
Locations in computer space are identified by url. A file name serves as a url, the last part of the url at least.

The href tells the browser where in computer space to find the location being linked to. When only the filename is specified, browser
looks in the same file as the current file. This is true even when a link is made to a page that sits on a different computer. When only filename is specified, browser looks in the same directory as the file containing the link.

When directing the web browser, we can provide it a relative path name or an absolute one. The relative path name, as the name implies, says relative to this file, this is where to find the location being linked to.

When you see a /, replace it with "." and think in terms of objects.

files/file.html - files.file : Files is the array and file is the element of the array. The element belongs to the array. Here we are
saying go to the files directory and find the file object within this directory. The files directory is in the same directory as the current file.

files/morefiles/file.html: files.morefiles.file
The file being linked to "file.html" is in the morefiles array. The morefiles array itself is an element of the files array. The array files is in the same directory as the file that contains the link.
../file.html
The file being linked to belongs to a directory that is one level above the current directory. The directory one level above the current directory an element of an array. That directory is in the same directory as the file containing the link.
../../files/file.html
file element belongs to the files array

Abslute path: here we're directing the browser from the top of the file system.
Absolute path names begin with a /
ie. when browser sees a / it knows you are using absolute pathname system to direct it.
/home/katlego/file.html
Remember we are always looking for an object not a directory.
Here we are saying that the object file.html is located in the katlego directory of the home.
home.katlego.file.html: The object bein linked to belongs to the katlego array. The katlego array itself is an element of the home array
An array is a container.

The root directory is /. home is not the only element of the root directory, there are many others.
the home directory is home/katlego not just home. katlego is the only element of the home array.

relative vs absolute
You want to avoid breaking links when files are being moved around.
If objects being linked are in the same array a relative system will do. When the array is moved, links won't break
If object being linked are not in the same array, an absolute system will do. When the array is moved, link still not broken.

objects on the same local disc can be linked
An object on a local disc to be linked to another that is on foreign disk.
The internet is an interconnection of computers. Each computer can be viewed as an element in web space. Each computer contains files on
its local disk.
To link to an element on a foreign computer, the pathname on the hypertext link is replaced by a url.
Not foreign but remote.

Up to this points objects have been referring to web pages that have an html extension. ie. html files
Each page has a url. A page's url is found in the address box of the browser. 

Up to this point we've treated the object we are linking to as a page. We can treat the page as an array containing several locations
within its core. This means that we can link to specific locations within a page, not just the page in general.

The way to do this is to place that location under a tag and assign an ID to that tag. No two tags in the same page can have the same
ID. 
Since the html file plays the role of the array and the ID'd tag plays the role of the contained object, the # replaces the /
file.html#idname replace # with . and think in terms of objects. The object being linked to idname, belongs to array file.
Elements in the same page can also be linked using the ID attribute
<a href = "#idname">clickable link</a> - this is the same idea as the relative pathname.

url consists of protocol, host, directory/path
it can also contain port, query and...

Anchor tag and hypertext reference being linked to
A relative pathname defines the location of the file/object being linked to relative to the file containing the link. Here we are saying
to find the file, search starting at the directory containing the file and follow the link.
An absolute pathname - starting with / - searches relative to the root directory
An anchor is a specific location/tag - list item, paragraph, heading... -  marked with the ID attribute. The anchor is used to define
a specific location within a page that can be linked to.
http, ftp points to a file on an ftp server, a file url points to a file contained on a local disk and mailto urls are used to send email


A browser is a on object. The browser object is commanded using the HTML tags.
The browser object has a pointer. The browser can be commanded to make its pointer point to a specific location. 
When the browser is made to point at that location, it parses and renders contents it finds at the location.
The browser object receives commands and communicates with the server and fulfil those commands.
The url contains all the information the browser needs to do its job.
This is a typical client-server application. The user uses the client to make commands of the server. The user commands the server via the browser.
The server does the real job.

............................

LESSON 7

Here I'm showing you what the browser can be commanded to do.

....................


LESSON 8

A tag has a style attribute
The style attribute is the least efficient means of applying style to a page.

This is a bit confusing but, in addition to the style attribute of tags, we also have the style HTML tag that is used to apply rules
to specific elements of a page. Inside the style tag, rules are written
<style>
selector{"property: value","property: value"}
</style>
Here we are saying to the browser whenever you see a selector in this page, affect its appearance/style as the rules dictate.
The style attribute is placed inside the head of a document. When done in this way the rules are page-wide ie. apply to all elements 
of a page.
An alternative is to create a style sheet and link to it from any page using the link tag. The link tag's href attribute is used
to tell the browser where to fetch the sheet being linked to. The type attribute specifies MIME info...
medium can be print, screen. You can specify different styles for different media outlets.
Stylesheets can be given titles. The rel attribute of the link tag is used to specify the title of the sheet being linked to
You can specify many sheets for your page but the one with title matching rel will be the preferred on.
Now JavaScript can be used to select between different sheets.

One page can link to different sheets and all rules will be applied

Look, each tag is like a class. Everytime the browser sees a tag, it creates an instance/object of the tag class.
Styles can be applied to more than one selector at a time
h,p,li {pro;val}
the "," is like an and. here we are saying this rule applies to h and p and li. When you see comma, think and.
In HTML it's possible to nest element ie. place one element inside another.
An element nested belongs to another one. Rules can be specified for nested elements by specifying the nesting element and the nested element.

h li{pro;val}
Here we are saying. the rule applies to li in h
Space means in but is read backwards. rule applies to all instances of li in h. When you see space think "in" and read it backwards.
cite {pro;val} - all instances of cite
p cite{pro;value} - all instances of cite in paragraph
li cite{pro;value} - all instances of ite in list.

more specific rules override more general rules. This means that rules for nested elements wil override more general ones.

We can create our own classification for use with css.
HTML tags all have class and id attributes. The id is like assigning a variable name to a tag and the class attribute is like assigning
a type to a tag. Think of the id as the name and the class as the surname. The name is unique to the individual but the surname is
shared by the group.
class          id
type           variable
surname        name
group          individual

.className{pro;val}
The dot says to browser we are referring to a class
div.important{pro;val}
p.important{pro;val}
Here we are being more specific to the browser. We are saying div.important = div of the important class
p.important = p of the important group

# -> id
. -> class

h1, #headline, .heading, div.important {pro;value}
h1 -> element
, -> and
# -> id
. -> class
div.important -> div in the important group

ul li.important{pro,value;}
" " in
li.imporant -> li in the important group
rule applies to list item belonging to the important class and nested within an unordered list.

a new class can be created by combining simpler classes.
.yellow{}
.blue{}
.yellow.blue{}
<class "blue yellow">
For rule to be applied, element must be present in both.

Cascading - styles cascade from parent to child

The body is the main parent.
The div is the next parent
The ps are the next set of parents
the spans are the children of the p

The main idea is that links have a state; a link can be active, visited, hover...
: -> link is some state

BOX MODEL
Margin
Border
Padding
Content

Each element has a box around it. The box around an element has a border, a margin and some padding.
The attributes of an element's box are its content, padding, border and margin.
Each attribute in turn has attributes. Attributes of a box's border are its width,colour, style
The border property is used to set the values of multiple attributes.
Each border has sides; left, right, top and bottom Each side's attributes can be set independently.

There is some white space surrounding a box's border. Padding is the whitespace inside the border and margin is the whitespace
outside the border.

Each element has a box. The box has a border. The border has a padding and some margin as well. The padding is the space inside the border
and the margin is the space outside the border. When there's no padding, the content will be right up againt the border and when there's no margin the outside elements will be jammed against the border.

the display property is used to set how the content is display - inline or block.

p span.important{pro;val}
this is an element span of class important nested within a paragraph element.

The size of the box set using the width and height properties of the style

........

LESSON 9: IMAGES



Placing an image inside an anchor tag means that you want to use that image as a link to something.

An element has a background. Any element - paragraph, body, list item, list link...
The background itself is an object and it has attributes. The attributes of a background can be set.
The attributes of a background object are its color, image,repeat,  attachment, position. These attributes
can be set for any element.

